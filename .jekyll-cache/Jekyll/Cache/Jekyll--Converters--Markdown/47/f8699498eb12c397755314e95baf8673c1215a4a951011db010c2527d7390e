I"<blockquote>
  <p>TL;DR: follow <a href="https://docs.github.com/en/pages/quickstart">the official guide</a>.</p>
</blockquote>

<p>Here we introduce a terse version, in three steps.</p>

<h3 id="initial-a-repository"><a href="https://docs.github.com/en/pages/quickstart"><strong>Initial a repository</strong></a></h3>
<p>First, we initial a reporsitory called <code class="language-plaintext highlighter-rouge">username.github.io</code>. GitHub Pages embeded in a repository is available for us to create our own website. We can use the Jekyll Theme Chooser to load a pre-made theme and then modify the content and style. The site address will be limited as <code class="language-plaintext highlighter-rouge">username.github.io</code> in default.</p>

<p>We can configure our website’s information in the file <code class="language-plaintext highlighter-rouge">_config.yml</code>.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>theme: jekyll-theme-minimal
title: YOUR-WEBSITE-TITLE
description: YOUR-WEBSITE-DESCRIPTION
</code></pre></div></div>

<p>Besides, we can rewrite the README.md as we like, which will be the introduction of the website.</p>

<h3 id="adding-content"><a href="https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/adding-content-to-your-github-pages-site-using-jekyll#about-content-in-jekyll-sites"><strong>Adding Content</strong></a></h3>

<p>The main types of content for Jekyll sites are pages and posts.</p>

<center><img src="./assets/img/posts/20220606/webrick-error.png" /></center>

<h4 id="pages">Pages</h4>
<p>A page is for standalone content that isn’t associated with a specific date, such as an “About” page. We can add following YAML frontmatter to the top of the file so that it can be published on <code class="language-plaintext highlighter-rouge">https://USERNAME.github.io/URL-PATH</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>layout: page
title: "PAGE TITLE"
permalink: /URL-PATH/
</code></pre></div></div>

<h4 id="posts">Posts</h4>
<p>A post is a blog post. The default Jekyll site contains a directory named _posts that contains a default post file. Similar to page setting, we can add following YAML frontmatter to the top of the file.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>layout: post
title: "POST TITLE"
date: YYYY-MM-DD hh:mm:ss -0000
categories: CATEGORY-1 CATEGORY-2
</code></pre></div></div>
<p>We can control the publishing path in <code class="language-plaintext highlighter-rouge">_config.yml</code>.</p>

<h3 id="build-locally"><a href="https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/testing-your-github-pages-site-locally-with-jekyll"><strong>Build Locally</strong></a></h3>
<p>In order to write in a way of <em>What You See Is What You Get</em>, we also want to preview and test changes to our site locally, rather than push it to github and wait for it to be built every time we finish a blog.</p>

<h4 id="prerequisites">Prerequisites</h4>
<p>First, we need to configure local environment.</p>
<ul>
  <li>Install <a href="https://jekyllrb.com/docs/installation/">Jekyll</a></li>
  <li>Create a Jekyll site. The key process is to create a Gemfile and write necessary dependencies.</li>
</ul>

<blockquote>
  <p>Jekyll is a <strong>static site generator</strong> with built-in support for GitHub Pages and a simplified build process. Jekyll takes Markdown and HTML files and creates a complete static website based on your choice of layouts.</p>
</blockquote>

<h4 id="here-we-go">Here we go</h4>
<p>Through command <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code>, we can build our blog in default on 127.0.0.0:4000. Now let’s dive into our folder and explore the structrue and important configuration file of our websites.</p>

<p><code class="language-plaintext highlighter-rouge">_includes</code>: It is much similar to header files we included in C++. But here, we include them to build a web page.
<code class="language-plaintext highlighter-rouge">_layouts</code>: It defines different styles for us to arrange how a page looks like.
<code class="language-plaintext highlighter-rouge">_pages</code>: Simi
<code class="language-plaintext highlighter-rouge">_posts</code>:
<code class="language-plaintext highlighter-rouge">_site</code>: Static pages automatically generated will be stored on local <code class="language-plaintext highlighter-rouge">_site</code> directory. In other words, we can ignore them during version control.
<code class="language-plaintext highlighter-rouge">assets</code>: Front end resources like css, fonts, and javascript are included. We can also upload images shown in our blogs to the <code class="language-plaintext highlighter-rouge">img</code> folder.
<code class="language-plaintext highlighter-rouge">404.html</code> and <code class="language-plaintext highlighter-rouge">ipfs-404.html</code>:
<code class="language-plaintext highlighter-rouge">Gemfile</code>:
<code class="language-plaintext highlighter-rouge">index.html</code>:
<code class="language-plaintext highlighter-rouge">sitemap.xml</code>:</p>

<p>Now we can happily write down what we want and post them to the world.</p>

:ET